#Q: Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

#push(x) -- Push element x onto stack.
#pop() -- Removes the element on top of the stack.
#top() -- Get the top element.
#getMin() -- Retrieve the minimum element in the stack.

class MinStack(object):

    def __init__(self):
        """
        initialize your data structure here.
        """
        self.stack = []
        
    def push(self, x):
        """
        :type x: int
        :rtype: void
        """
        minimum = self.getMin()
        if not minimum or x < minmum:
            minimum = x
        self.stack.append([x,minimum])
        
    def pop(self):
        """
        :rtype: void
        """
        return self.stack.pop()
        
        
    def top(self):
        """
        :rtype: int
        """
        return self.stack[-1][0]
        
    def getMin(self):
        """
        :rtype: int
        """
        if len(self.stack) == 0:
            return None
        return self.stack[-1][1]
        
        
