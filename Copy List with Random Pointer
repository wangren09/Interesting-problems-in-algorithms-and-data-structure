#Q: A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.
#Return a deep copy of the list.

# Definition for singly-linked list with a random pointer.
# class RandomListNode(object):
#     def __init__(self, x):
#         self.label = x
#         self.next = None
#         self.random = None

class Solution(object):
    def copyRandomList(self, head):
        """
        :type head: RandomListNode
        :rtype: RandomListNode
        """
        if head is None:
            return None
        nhead = RandomListNode(head.label)
        mMap = {}
        ori_link = head
        new_link = nhead
        while head:
            new_link.random = ori_link.random
            if ori_link.next:
                new_link.next = RandomListNode(ori_link.next.label)
                mMap[ori_link.next] = new_link.next
            else:
                new_link.next = None
            ori_link = ori_link.next
            new_link = new_link.next
        new_link = nhead
        while new_link:
            if new_link.random:
                new_link.random = mMap[new_link.random]
            new_link = new_link.next
        return nhead
