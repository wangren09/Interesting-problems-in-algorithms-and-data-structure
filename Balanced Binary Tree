#Q:Given a binary tree, determine if it is height-balanced.

#For this problem, a height-balanced binary tree is defined as:
#a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isBalanced(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        balance, height = self.validate(root)
        return balance
        
    def validate(self, root):
        if root is None:
            return True, 0
        bal_left, height_left = self.validate(root.left)
        if not bal_left:
            return bal_left, height_left
        bal_right, height_right = self.validate(root.right)
        if not bal_right:
            return bal_right, height_right
        return abs(height_left - height_right) <= 1, max(height_left, height_right) + 1
