#Q: Given a binary tree, flatten it to a linked list in-place.

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def flatten(self, root):
        """
        :type root: TreeNode
        :rtype: void Do not return anything, modify root in-place instead.
        """
        self.helper(root)
    def helper(self, root):
        if root is None:
            return None
        leftlast = self.helper(root.left)
        rightlast = self.helper(root.right)
        if leftlast:
            leftlast.right = root.right
            root.right = root.left
            root.left = None
        if rightlast:
            return rightlast
        if leftlast:
            return leftlast
        return root
