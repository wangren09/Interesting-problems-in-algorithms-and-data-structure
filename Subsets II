#Q: Given a collection of integers that might contain duplicates, nums, return all possible subsets (the power set).

#Note: The solution set must not contain duplicate subsets.



class Solution(object):
    def subsetsWithDup(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        if nums is None:
            return None
        result = []
        subset = []
        nums.sort()
        self.helper(result, subset, nums, 0)
        return result
    def helper(self, result, subset, nums, startindex):
        result.append(list(subset))
        for i in range(startindex, len(nums)):
            if i != startindex and nums[i] == nums[i-1]:
                continue
            subset.append(nums[i])
            self.helper(result, subset, nums, i + 1)
            subset.pop()
            
