#Q: Given an directed graph, a topological order of the graph nodes is defined as follow:
#For each directed edge A -> B in graph, A must before B in the order list.
#The first node in the order can be any node in the graph with no nodes direct to it.
#Find any topological order for the given graph.

"""
Definition for a Directed graph node
class DirectedGraphNode:
    def __init__(self, x):
        self.label = x
        self.neighbors = []
"""


class Solution:
    """
    @param: graph: A list of Directed graph node
    @return: Any topological order for the given graph.
    """
    def topSort(self, graph):
        if graph is None:
            return
        indegree = self.findindegree(graph)
        order = []
        queue = collections.deque([n for n in graph if indegree[n] == 0])
        while queue:
            node = queue.popleft()
            order.append(node)
            for neighbor in node.neighbors:
                indegree[neighbor] -= 1
                if indegree[neighbor] == 0:
                    queue.append(neighbor)
        return order
    def findindegree(self, graph):
        indeg = {x: 0 for x in graph}
        for node in graph:
            for neighbor in node.neighbors:
                indeg[neighbor] += 1
        return indeg
