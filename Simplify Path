#Q: Given an absolute path for a file (Unix-style), simplify it. 

#For example,
#path = "/home/", => "/home"
#path = "/a/./b/../../c/", => "/c"
#path = "/a/../../b/../c//.//", => "/c"
#path = "/a//b////c/d//././/..", => "/a/b/c"

#Corner Cases:

#Did you consider the case where path = "/../"?
#In this case, you should return "/".
#Another corner case is the path might contain multiple slashes '/' together, such as "/home//foo/".
#In this case, you should ignore redundant slashes and return "/home/foo".

class Solution(object):
    def simplifyPath(self, path):
        """
        :type path: str
        :rtype: str
        """
        res = [p for p in path.split('/') if p != '.' and p != '']
        store = []
        for i in range(len(res)):
            if res[i] == '..':
                if store != []:
                    store.pop()
            else:
                store.append(res[i])
        return '/' + '/'.join(store)
