#Q:Given a nested list of integers, implement an iterator to flatten it.

#Each element is either an integer, or a list -- whose elements may also be integers or other lists.

# """
# This is the interface that allows for creating nested lists.
# You should not implement it, or speculate about its implementation
# """
#class NestedInteger(object):
#    def isInteger(self):
#        """
#        @return True if this NestedInteger holds a single integer, rather than a nested list.
#        :rtype bool
#        """
#
#    def getInteger(self):
#        """
#        @return the single integer that this NestedInteger holds, if it holds a single integer
#        Return None if this NestedInteger holds a nested list
#        :rtype int
#        """
#
#    def getList(self):
#        """
#        @return the nested list that this NestedInteger holds, if it holds a nested list
#        Return None if this NestedInteger holds a single integer
#        :rtype List[NestedInteger]
#        """

# Your NestedIterator object will be instantiated and called as such:
# i, v = NestedIterator(nestedList), []
# while i.hasNext(): v.append(i.next())

class NestedIterator(object):

    def __init__(self, nestedList):
        """
        Initialize your data structure here.
        :type nestedList: List[NestedInteger]
        """
        self.nextnum = None
        self.stack = []
        for i in reversed(nestedList):
            self.stack.append(i)
        
        
     def next(self):
        """
        :rtype: int
        """
        if self.nextnum is None:
            return self.hasNext()
        temp, self.nextnum = self.nextnum, None
        return temp
        
        
     def hasNext(self):
        """
        :rtype: bool
        """
        if self.nextnum:
            return True
        while self.stack:
            item = self.stack.pop()
            if item.isInteger():
                self.nextnum = item.getInterger()
                return True
            for i in reversed(item.getList()):
                self.stack.append(i)
        return False
                
