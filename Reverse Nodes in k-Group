#: Q: Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

#k is a positive integer and is less than or equal to the length of the linked list. 
#If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

"""
Definition of ListNode
class ListNode(object):
    def __init__(self, val, next=None):
        self.val = val
        self.next = next
"""

class Solution:
    """
    @param head: a ListNode
    @param k: An integer
    @return: a ListNode
    """
    """
    head->n1->n2->...->nk->nk+1
    head->nk->nk-1->...->n1->nk+1
    """

    def reverseKGroup(self, head, k):
        dummy = ListNode(0)
        dummy.next = head
        head = dummy
        while head:
            head = self.reverse(head, k)
        return dummy.next
    def reverse(self, head, k):
        testend = head
        n1 = head.next
        for i in range(k):
            testend = testend.next
            if testend is None:
                return None
        endplus = testend.next
        cur = head.next
        prev = None
        while cur != endplus:
            temp = cur.next
            cur.next = prev
            prev = cur
            cur = temp
        head.next.next = cur
        head.next = prev
        return n1
