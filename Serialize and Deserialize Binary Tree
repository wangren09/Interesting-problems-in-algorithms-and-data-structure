#Q: Serialization is the process of converting a data structure or object into a sequence of bits 
#so that it can be stored in a file or memory buffer, 
#or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

#Design an algorithm to serialize and deserialize a binary tree. 
#There is no restriction on how your serialization/deserialization algorithm should work. 
#You just need to ensure that a binary tree can be serialized to a string 
#and this string can be deserialized to the original tree structure.

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Codec:

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        if root is None:
            return '{}'
        queue = [root]
        index = 0
        while len(queue) > index:
            node = queue[index]
            if node:
                queue.append(node.left)
                queue.append(node.right)
            index += 1
        while queue[-1] is None:
            queue.pop()
        return '{%s}'%','.join([str(x.val) if x is not None else '#' for x in queue])
    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        if data == '{}':
            return None
        val = data[1:-1].split(',')
        index = 0
        root = TreeNode(int(val[index]))
        queue = [root]
        isleft = True
        for i in val[1:]:
            if i != '#':
                node = TreeNode(int(i))
                if isleft:
                    queue[index].left = node
                else:
                    queue[index].right = node
                queue.append(node)
            if not isleft:
                index += 1
            isleft = not isleft
        return root
        
