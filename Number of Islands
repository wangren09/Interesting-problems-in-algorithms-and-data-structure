#Q: Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. 
# An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. 
# You may assume all four edges of the grid are all surrounded by water.

class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        if len(grid) < 1 or len(grid[0]) < 1:
            return 0
        m = len(grid)
        n = len(grid[0])
        num = 0
        for i in range(m):
            for j in range(n):
                if grid[i][i] == '1':
                    self.bfs(grid, m, n, i, j)
                    num += 1
        return num
    def bfs(self, grid, m, n, x, y):
        queue = collections.deque([x, y])
        grid[x][y] = '0'
        xydelta = [[0,1],[1,0],[-1,0],[0,-1]]
        while queue:
            [x, y] = queue.popleft()
            for i, j in xydelta:
                if not self.valid(grid, m, n, x+i, y+j):
                    continue
                grid[x+i][y+j] = '0'
                queue.append([x+i, y+j])
        return
    def valid(self, grid, m, n, x, y):
        return 0<=x<=m and 0<=y<=n and grid[x][y] == '1'
